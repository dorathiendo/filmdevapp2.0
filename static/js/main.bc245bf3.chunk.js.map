{"version":3,"sources":["icons/right-arrow.svg","icons/back-arrow.svg","data lazy /^/.//.*$/ groupOptions: {} namespace object","pages/Step.js","utils/timerUtils.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","Step","interval","useState","data","setData","timer","setTimer","isTimerStarted","setTimerStarted","instruction","setInstruction","params","useParams","stepIndex","parseInt","useEffect","type","default","time","className","onClick","t","countdown","setInterval","console","log","clearInterval","startTimer","name","sec_num","hours","Math","floor","minutes","seconds","toMMSS","to","src","LeftArrowIcon","alt","RightArrowIcon","Routes","location","useLocation","TransitionGroup","CSSTransition","key","classNames","timeout","path","App","useRef","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc245bf3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/right-arrow.afe2ff1d.svg\";","module.exports = __webpack_public_path__ + \"static/media/back-arrow.1d738244.svg\";","var map = {\n\t\"./c41\": [\n\t\t21,\n\t\t0\n\t],\n\t\"./c41.js\": [\n\t\t21,\n\t\t0\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 36;\nmodule.exports = webpackAsyncContext;","import React, {useRef, useState, useEffect} from 'react';\nimport './Step.scss';\nimport RightArrowIcon from './../icons/right-arrow.svg';\nimport LeftArrowIcon from './../icons/back-arrow.svg';\nimport {Link, useLocation, useParams} from \"react-router-dom\";\nimport { toMMSS } from './../utils/timerUtils';\n\nexport default function Step({}) {\n    let interval = null;\n    const [ data, setData ] = useState(null);\n    const [ timer, setTimer ] = useState(0);\n    const [ isTimerStarted, setTimerStarted] = useState(false);\n    const [ instruction, setInstruction] = useState('');\n\n    const params = useParams();\n    const stepIndex = parseInt(params.stepIndex);\n\n    useEffect(() => {\n        import(`./../data/${params.type}`)\n            .then((data) => {\n                setData(data.default[stepIndex]);\n                if (data.default[stepIndex].time) {\n                    setTimer(data.default[stepIndex].time);\n                }\n            });\n    }, [stepIndex]);\n\n    const startTimer = (time) => {\n        setTimerStarted(true);\n        let t = time;\n        let countdown = 30;\n        interval = setInterval(() => {\n            t = t - 1;\n\n            console.log('t', t);\n            console.log('countdown', countdown)\n\n            if (t > (time - 15)) {\n                setInstruction('Agitate');\n            } else if (t <= (time -15)) {\n                countdown = countdown - 1;\n                if (countdown === 0) {\n                    setInstruction('Invert');\n                    countdown = 30;\n                }\n            } else if (t <= 5) {\n                setInstruction('Pour out');\n            } else {\n                setInstruction('');\n            }\n\n            setTimer(t);\n\n            if (t <= 0) {\n                clearInterval(interval);\n                setTimerStarted(false);\n            }\n        }, 1000);\n    };\n\n    return (\n        <div className=\"step-wrapper\">\n            { data &&\n                <div className={`step ${isTimerStarted ? 'active' : ''}`} onClick={() => !isTimerStarted && startTimer(data.time)}>\n                    <h1>Step {stepIndex}: {data.name}</h1>\n                    { <div className=\"timer\">{timer > 0 && toMMSS(timer)}</div>}\n                    <p className=\"instruction\">{instruction}</p>\n                </div>\n            }\n            <div className=\"arrows\">\n                <div className=\"arrow\">\n                    <Link to={`/${params.type}/step/${stepIndex-1}`}>\n                        <img src={LeftArrowIcon} alt=\"\" className=\"icon\"/>\n                    </Link>\n                </div>\n                <div className=\"arrow\" onClick={() => {\n                    clearInterval(interval)\n                    setTimerStarted(false);\n                }}>\n                    <Link to={`/${params.type}/step/${stepIndex+1}`}>\n                        <img src={RightArrowIcon} alt=\"\" className=\"icon\"/>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n}","export function toMMSS(time) {\n    let sec_num = parseInt(time, 10); // don't forget the second param\n    let hours   = Math.floor(sec_num / 3600);\n    let minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    let seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n    if (minutes < 10) {minutes = \"0\"+minutes;}\n    if (seconds < 10) {seconds = \"0\"+seconds;}\n    return minutes+':'+seconds;\n}\n","import {Route, Switch, useLocation} from \"react-router-dom\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\nimport Step from \"./pages/Step\";\nimport React from \"react\";\nimport './Routes.scss';\n\nexport default function Routes() {\n    const location = useLocation();\n    return (\n        <div className=\"routes\">\n            <TransitionGroup>\n                <CSSTransition\n                    key={location.key}\n                    classNames=\"page\"\n                    timeout={300}\n                >\n                    <Switch>\n                        <Route path=\"/:type/step/:stepIndex\">\n                            <Step />\n                        </Route>\n                    </Switch>\n                </CSSTransition>\n            </TransitionGroup>\n        </div>\n    );\n}","import React, {useRef} from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useLocation, BrowserRouter,\n} from \"react-router-dom\";\nimport NavMenu from './NavMenu';\nimport Routes from './Routes';\nimport './App.scss';\n\nfunction App() {\n    const contentWrapperRef = useRef(null)\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                {/*<NavMenu/>*/}\n                <Routes />\n            </BrowserRouter>\n        </div>\n    );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Project1 is cached for offline use.\" message.\n              console.log('Project1 is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}