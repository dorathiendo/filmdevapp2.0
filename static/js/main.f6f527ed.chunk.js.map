{"version":3,"sources":["NavMenu.js","pages/Home.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["NavMenu","activeLink","useLocation","pathname","replace","useState","isOpen","openMenu","className","onClick","to","Home","id","Routes","location","TransitionGroup","CSSTransition","key","classNames","timeout","exact","App","useRef","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVAMe,SAASA,EAAT,GAAuB,eAClC,IAAMC,EAAaC,cAAcC,SAASC,QAAQ,IAAK,IADtB,EAENC,oBAAS,GAFH,mBAE1BC,EAF0B,KAElBC,EAFkB,KAGjC,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAS,UACV,4BAAQA,UAAU,SAASC,QAAS,kBAAMF,GAAUD,MAEpD,uCACA,qCAEJ,yBAAKE,UAAS,oBAAeF,EAAS,OAAQ,IAAMG,QAAS,kBAAMF,GAAS,KACxE,kBAAC,IAAD,CAAMG,GAAG,IAAIF,UAA0B,KAAfP,EAAoB,SAAU,IAAtD,QACA,kBAAC,IAAD,CAAMS,GAAG,YAAYF,UAA0B,aAAfP,EAA4B,SAAU,IAClE,0BAAMO,UAAU,SAAhB,KACA,0BAAMA,UAAU,SACZ,iDACA,+CAIR,kBAAC,IAAD,CAAME,GAAG,YAAYF,UAA0B,aAAfP,EAA4B,SAAU,IAClE,0BAAMO,UAAU,SAAhB,KACA,0BAAMA,UAAU,SACZ,6CACA,uDAGR,kBAAC,IAAD,CAAME,GAAG,YAAYF,UAA0B,aAAfP,EAA4B,SAAU,IAClE,0BAAMO,UAAU,SAAhB,KACA,0BAAMA,UAAU,SACZ,mDACA,uDAGR,kBAAC,IAAD,CAAME,GAAG,YAAYF,UAA0B,aAAfP,EAA4B,SAAU,IAClE,0BAAMO,UAAU,SAAhB,KACA,0BAAMA,UAAU,SACZ,8DACA,yD,0BC1CT,SAASG,IACpB,OACI,yBAAKC,GAAG,OAAOJ,UAAU,QAAzB,Q,MCCO,SAASK,IACpB,IAAMC,EAAWZ,cACjB,OACI,yBAAKM,UAAU,UACX,kBAACO,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,IAAKH,EAASG,IACdC,WAAW,OACXC,QAAS,KAET,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,MAAM,KACT,kBAAC,EAAD,W,MCQbC,MAdf,WAEI,OAD0BC,iBAAO,MAE7B,yBAAKd,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNIe,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6f527ed.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n    Link, useLocation,\n} from \"react-router-dom\";\nimport './NavMenu.scss';\n\nexport default function NavMenu({ }) {\n    const activeLink = useLocation().pathname.replace('/', '');\n    const [isOpen, openMenu] = useState(false);\n    return (\n        <div className=\"nav-menu\">\n            <div className={`header`}>\n                <button className=\"mobile\" onClick={() => openMenu(!isOpen)}>\n                </button>\n                <h1>Dora Do</h1>\n                <h1>2020</h1>\n            </div>\n            <div className={`nav-items ${isOpen ? 'open': ''}`} onClick={() => openMenu(false)}>\n                <Link to=\"/\" className={activeLink === '' ? 'active': ''}>Home</Link>\n                <Link to=\"/project1\" className={activeLink === 'project1' ? 'active': ''}>\n                    <span className=\"index\">1</span>\n                    <span className=\"title\">\n                        <span>\"Art-chtecture\"</span>\n                        <span>Photography</span>\n                    </span>\n\n                </Link>\n                <Link to=\"/project2\" className={activeLink === 'project2' ? 'active': ''}>\n                    <span className=\"index\">2</span>\n                    <span className=\"title\">\n                        <span>Family Room</span>\n                        <span>Product Photography</span>\n                    </span>\n                </Link>\n                <Link to=\"/project3\" className={activeLink === 'project3' ? 'active': ''}>\n                    <span className=\"index\">3</span>\n                    <span className=\"title\">\n                        <span>Pottery By Audrey</span>\n                        <span>Product Photography</span>\n                    </span>\n                </Link>\n                <Link to=\"/project4\" className={activeLink === 'project4' ? 'active': ''}>\n                    <span className=\"index\">4</span>\n                    <span className=\"title\">\n                        <span>Billie Marie Fall Collection</span>\n                        <span>Product Photography</span>\n                    </span>\n                </Link>\n            </div>\n        </div>\n    );\n}","import React, {useRef} from 'react';\nimport './Home.scss';\n\nexport default function Home() {\n    return (\n        <div id=\"home\" className=\"home\">Home</div>\n    );\n}","import {Route, Switch, useLocation} from \"react-router-dom\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\nimport Home from \"./pages/Home\";\nimport React from \"react\";\nimport './Routes.scss';\n\nexport default function Routes() {\n    const location = useLocation();\n    return (\n        <div className=\"routes\">\n            <TransitionGroup>\n                <CSSTransition\n                    key={location.key}\n                    classNames=\"page\"\n                    timeout={300}\n                >\n                    <Switch>\n                        <Route exact=\"/\">\n                            <Home />\n                        </Route>\n                    </Switch>\n                </CSSTransition>\n            </TransitionGroup>\n        </div>\n    );\n}","import React, {useRef} from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useLocation, BrowserRouter,\n} from \"react-router-dom\";\nimport NavMenu from './NavMenu';\nimport Routes from './Routes';\nimport './App.scss';\n\nfunction App() {\n    const contentWrapperRef = useRef(null)\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <NavMenu/>\n                <Routes />\n            </BrowserRouter>\n        </div>\n    );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Project1 is cached for offline use.\" message.\n              console.log('Project1 is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}